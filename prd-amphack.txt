# Office Object Hunt – AR Scavenger Game

*(Final PRD v1.0 — 29 Jul 2025)*

---

## 1 Purpose & Scope

Build a **browser‑only AR scavenger game** that demonstrates the same capture/validate loop as the Home‑Energy Site Survey, but with five generic office items. The deliverable must run on iOS Safari 15+ and Android Chrome 12+ with **no install**, deploy in under five minutes to Vercel, and be trivial for an automated coding agent (AMP Code / Cloud Code) to scaffold.

### Success Drivers

* **Ease of implementation** > all else
* **Low execution risk** during live demo
* Clear future path to: dynamic item lists (Typeform‑style) and Supabase photo retention

---

## 2 Technical Stack (Locked)

| Layer           | Decision                                                                                                                                        |
| --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| Framework       | **Next.js 14** (App Router), React 18, Node 20                                                                                                  |
| Language        | **TypeScript** with `"strict": true`                                                                                                            |
| Styling         | Tailwind CSS 3.x                                                                                                                                |
| AR Engine       | **MindAR v1.2.0** (natural‑image tracking); overlay kept **screen‑fixed** for robustness                                                        |
| Computer Vision | **Gemini 1.5 Pro Vision** via REST endpoint `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-vision:generateContent`     |
| Hosting         | Vercel (Edge Functions for `/api/classify`)                                                                                                     |
| Package mgr     | `npm`                                                                                                                                           |
| Lint / Format   | `eslint` + `prettier` defaults (`npm run lint`)                                                                                                 |
| Env Secrets     | `GEMINI_API_KEY` stored in Vercel project settings                                                                                              |
| Assets          | Five **512 px transparent PNG placeholders** generated by the coding agent: `bottle.png`, `mug.png`, `stapler.png`, `keyboard.png`, `chair.png` |
| Photo Handling  | Capture at native camera resolution → **downsample to 256 px** before upload. Accepted images discarded (v0); Supabase hook reserved for v1.    |

Directory layout (locked):

```
/office-object-hunt
├─ src/app/             (Next.js routes)
├─ src/components/
│   └─ ArHunt.tsx       (main AR component)
├─ public/targets/      (overlay PNGs)
└─ .eslintrc, tsconfig, tailwind.config
```

---

## 3 Gameplay Loop (Happy Path)

| # | User Action                                                       | Implementation                                                |
| - | ----------------------------------------------------------------- | ------------------------------------------------------------- |
| 1 | **Start Hunt** on landing page                                    | Loads `<ArHunt>` component; requests camera permission        |
| 2 | Live camera view + semi‑transparent overlay of current target     | Overlay is a draggable `<img>` centred on screen              |
| 3 | User aligns real object, taps **Shutter**                         | Snapshot captured via `canvas.toBlob()` (JPEG 80)             |
| 4 | Frontend `fetch('/api/classify')` with body `{ image, itemName }` | Edge function forwards to Gemini Vision                       |
| 5 | Gemini responds `{"yes"}` or `{"no"}`                             | If `yes`: confetti, mark complete; if `no`: flash “Try again” |
| 6 | Iterate until all **five** items found                            | State persisted in `localStorage` (`hunt_state_v1`)           |
| 7 | **Summary Screen** shows thumbnails + replay button               | Clears state on replay                                        |

Prompt template (immutable):

```
Is the main object in this image a <ITEM>? Reply "yes" or "no" only.
```

Acceptance: reply must equal `yes` (case‑insensitive).

---

## 4 Functional Requirements

| ID  | Requirement                                                                         | Implementation Hint                             |
| --- | ----------------------------------------------------------------------------------- | ----------------------------------------------- |
| F‑1 | Runs on iOS 15+ Safari & Android 12+ Chrome with no install                         | MindAR avoids WebXR; uses getUserMedia + WebGL  |
| F‑2 | Static **item manifest** `items.json` with name, overlay path, prompt fragment      | Designed for future dynamic fetch               |
| F‑3 | Draggable overlay for fine alignment                                                | `touchmove` updates CSS `transform`             |
| F‑4 | Vision response median ≤ 3 s                                                        | Downsample to 256 px; edge function in same POP |
| F‑5 | **Offline fallback**: if classifier call fails, auto‑pass item, flag `offline=true` | Prevents demo stall                             |
| F‑6 | Summary lists all items with ✓ / ✗ and replay button                                | Clears `localStorage` on replay                 |

---

## 5 Non‑Functional (Explicitly Out‑of‑Scope v0)

Security hardening, multi‑user leaderboard, i18n, accessibility, performance tuning, license headers.

---

## 6 Architecture

```
Next.js Frontend        Edge Function /api/classify
├─ ArHunt.tsx           ├─ fetch() to Gemini Vision
├─ items.json           └─ returns { yes | no, offline }
└─ overlay PNGs         (≈40 LoC)
```

---

## 7 Build Plan (8 hours)

| Hr  | Task                                                              |
| --- | ----------------------------------------------------------------- |
| 0–1 | `npx create-next-app office-object-hunt --ts --tailwind --eslint` |
| 1–2 | Integrate MindAR camera feed; screen‑fixed overlay                |
| 2–3 | Implement item manifest & overlay cycling UI                      |
| 3–4 | Write `/api/classify` edge function (REST proxy)                  |
| 4–5 | LocalStorage game state + summary screen                          |
| 5–6 | Confetti animation & offline fallback logic                       |
| 6–7 | Cross‑device smoke tests (iPhone 13, Pixel 7)                     |
| 7–8 | Polish copy, generate placeholder PNGs, record demo video         |

---

## 8 Acceptance Criteria

1. Opens on iPhone Safari & Android Chrome with no console errors.
2. Each real object accepted on ≤2 attempts; ≥4/5 objects accepted overall.
3. Summary screen shows all five items with status and **Restart** control.
4. Edge function round‑trip ≤ 3 s p95.

---


